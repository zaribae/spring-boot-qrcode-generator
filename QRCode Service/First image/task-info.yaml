type: edu
files:
  - name: src/qrcodeapi/Application.java
    visible: true
    text: |
      package qrcodeapi;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class Application {
          public static void main(String[] args) {
              SpringApplication.run(Application.class, args);
          }
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
      
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/QRCodeApiTest.java
    visible: false
    text: "import org.hyperskill.hstest.dynamic.DynamicTest;\nimport org.hyperskill.hstest.dynamic.input.DynamicTesting;\n\
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;\nimport org.hyperskill.hstest.mocks.web.response.HttpResponse;\n\
    import org.hyperskill.hstest.stage.SpringTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    \nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\
    import java.util.Objects;\n\npublic class QRCodeApiTest extends SpringTest {\n\
    \n    CheckResult testGetHealth() {\n        var url = \"/api/health\";\n    \
    \    HttpResponse response = get(url).send();\n\n        checkStatusCode(response,\
    \ 200);\n\n        return CheckResult.correct();\n    }\n\n    CheckResult testGetQrCode()\
    \ {\n        var url = \"/api/qrcode\";\n        HttpResponse response = get(url).send();\n\
    \n        checkStatusCode(response, 200);\n        checkContentType(response,\
    \ \"png\");\n\n        var expectedHash = \"a370a8d3e1ee0f0184132a3c3b5d2952\"\
    ;\n        var contentHash = getMD5Hash(response.getRawContent());\n        if\
    \ (!contentHash.equals(expectedHash)) {\n            return CheckResult.wrong(\"\
    \"\"\n                    Response: GET %s\n                     \n          \
    \          Response body does not contain a correct image:\n                 \
    \   Expected image hash %s, but was %s\n                    Make sure the size,\
    \ the contents and the format of the image are correct.\n                    \n\
    \                    \"\"\".formatted(url, expectedHash, contentHash)\n      \
    \      );\n        }\n\n        return CheckResult.correct();\n    }\n\n    @DynamicTest\n\
    \    DynamicTesting[] tests = {\n            this::testGetHealth,\n          \
    \  this::testGetQrCode\n    };\n\n    private void checkStatusCode(HttpResponse\
    \ response, int expected) {\n        var endpoint = response.getRequest().getEndpoint();\n\
    \        var actual = response.getStatusCode();\n        if (actual != expected)\
    \ {\n            throw new WrongAnswer(\"\"\"\n                    Request: GET\
    \ %s\n                    \n                    Response has incorrect status\
    \ code:\n                    Expected %d, but responded with %d\n            \
    \        \n                    \"\"\".formatted(endpoint, expected, actual)\n\
    \            );\n        }\n    }\n\n    private void checkContentType(HttpResponse\
    \ response, String imgType) {\n        var endpoint = response.getRequest().getEndpoint();\n\
    \        var expected = \"image/\" + imgType;\n        var actual = response.getHeaders().get(\"\
    Content-Type\");\n        if (!Objects.equals(expected, actual)) {\n         \
    \   throw new WrongAnswer(\"\"\"\n                    Request: GET %s\n      \
    \              \n                    Response has incorrect 'Content-Type' header:\n\
    \                    Expected \"%s\" but responded with \"%s\"\n             \
    \       \n                    \"\"\".formatted(endpoint, expected, actual)\n \
    \           );\n        }\n    }\n\n    private String getMD5Hash(byte[] rawContent)\
    \ {\n        try {\n            var md = MessageDigest.getInstance(\"MD5\");\n\
    \            var hash = md.digest(rawContent);\n            var hexString = new\
    \ StringBuilder();\n            for (byte b : hash) {\n                hexString.append(\"\
    %02x\".formatted(b));\n            }\n            return hexString.toString();\n\
    \        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n}\n"
    learner_created: false
  - name: src/qrcodeapi/ApiController.java
    visible: true
    text: |
      package qrcodeapi;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.GetMapping;
      import org.springframework.web.bind.annotation.RestController;
      
      @RestController
      public class ApiController {
      
          @GetMapping("/api/health")
          public ResponseEntity checkHealth() {
              return new ResponseEntity(HttpStatus.OK);
          }
      
          @GetMapping("/api/qrcode")
          public ResponseEntity getQR() {
              return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
          }
      }
    learner_created: true
  - name: src/qrcodeapi/Config.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/35506#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 10 Feb 2024 03:31:59 UTC"
record: 2
